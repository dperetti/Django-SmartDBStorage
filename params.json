{"name":"Django-smartdbstorage","tagline":"A Django model-based File Storage","body":"SmartDBStorage is a File Storage for Django that stores files in the\r\ndatabase using Django Models.\r\n\r\nWhen the attachments or images are as important as the other data, you\r\nmay want to store them in the database for better integrity and\r\nconsistency.\r\n\r\nFor example, this is specially useful to store original pictures which\r\nare displayed using [sorl thumbnail](https://github.com/sorl/sorl-thumbnail).\r\n\r\nAdvantages : everything at the same place, no more broken links, better\r\nflexibility. Disadvantages : performance, overall data usage.\r\n\r\nFeatures\r\n--------\r\n\r\n-  Minimal configuration : just a pluggable Django app.\r\n\r\n-  Django model based : No database to create and setup manually. Uses\r\n   [South](http://south.aeracode.org).\r\n\r\n-  Files are saved in chunks in order to limit memory usage.\r\n\r\n-  Original file names are preserved : No more logo_1.jpg, logo_2.jpg,\r\n   logo_3.jpg \"behind the scene\" renames. Files a renamed to\r\n   /some_unique_id/original\\file\\name.ext.\r\n\r\n-  Files can be extracted to another File Storage when accessed from the\r\n   web or be served directly from the database. (not recommended, but\r\n   useful for debugging purposes)\r\n\r\n-  Basic admin for inspection purposes.\r\n\r\nCaveats\r\n-------\r\n\r\n-  Django doesn't support blobs yet (planned in 1.6) so file chunks are\r\n   saved in base64, which increases the overall storage requirements.\r\n\r\nInstall\r\n-------\r\n\r\nIn your ``settings.py``, add ``'south'`` (if you don't use it already)\r\nand ``'smartdbstorage'`` to your ``INSTALLED_APPS``:\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        'south',\r\n        'smartdbstorage'\r\n    )\r\n\r\nFrom the command line:\r\n\r\n    ./manage.py syncdb\r\n    ./manage.py migrate smartdbstorage\r\n\r\nIn ``settings.py``, it's a good idea to set global defaults:\r\n\r\n    SMARTDBSTORAGE_SERVE_DIRECTLY = False  # when accessed from the web files are either served directly or extracted to another file storage\r\n    SMARTDBSTORAGE_EXTRACTION_STORAGE = DEFAULT_FILE_STORAGE\r\n\r\nIn your ``urls.py``, add the following:\r\n\r\n    (r'^some_prefix/', include('smartdbstorage.urls', namespace='smart_db_storage')),\r\n\r\nThis allows to serve files directly from the database if needed.\r\n\r\nExample usage\r\n-------------\r\n\r\nSimply specify a SmartDBStorage instance where you want to use it:\r\n\r\n    class Article(models.Model):\r\n        text = models.TextField()\r\n        image = ImageField(upload_to='articles_images', storage=SmartDBStorage())\r\n\r\nYou can override defaults like this:\r\n\r\n    class Article(models.Model):\r\n        text = models.TextField()\r\n        image = ImageField(upload_to='articles_images', storage=SmartDBStorage(option=dict(extraction_storage=FileSystemStorage())))\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}